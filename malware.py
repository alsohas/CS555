import warnings
import numpy as np
import pandas as pd
import pickle
import dill
import random
from sklearn.naive_bayes import MultinomialNB

# Donot modify the method signatures and return dtypes
# you can include additional functions of your choice


class MalwareDetectionModel:
    
    def __init__(self):

        # read in csv into dataframe
        df = pd.read_csv('malware_train.csv', low_memory=False)
        
        # shuffling data
        all_ids = np.arange(len(df))
        random.shuffle(all_ids)

        # setting dtypes
        self.dtypes = df.dtypes.to_dict()

        # print(df.columns)    
        
        # prediction column
        y_train = df['HasDetections']
        # feature columns
        x_train = df.drop('HasDetections', 1)

        # training
        multinomialNB = MultinomialNB()
        multinomialNB.fit(x_train, y_train)
        scores = cross_val_score(clf, X_train, y_train, cv=10)
        print(scores.mean())

        # print(self.dtypes)



        # self.dtypes = {
        #     'MachineIdentifier':                                    'category',
        #     # fill in the data types for the rest of the columns
        #     'HasDetections':                                        'int8'
        # }

    # trains a model, you can access the malware_train.csv file for training your model

    def train(self):

        print('Train Model')

    # predicts the probablity of a machine affected by malware. The input test_data is a pandas dataframe.
    # This function must return the predicted probabilities for the test machines

    def predict_probablities(self, test_data):

        print('Predict malware')

        return predictions


# calls the train function and saves the model_file
# # donot modify the contents
# if __name__ == "__main__":
#     detectionModel = MalwareDetectionModel()
#     detectionModel.train()
#     filename = 'malwaremodel.pkl'
#     f = open(filename, 'wb')
#     dill.dump(detectionModel, f)
#     f.close()

dm = MalwareDetectionModel()
